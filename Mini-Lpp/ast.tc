%option lang = "C++"
%option namespace = "AST"

%decls %{
//-----------------------------------------------/
//              BINARY  EXPRESSIONS
//-----------------------------------------------/
#include <vector>
#include <set>
#include <unordered_map> 
#include <iostream>
#include <sstream>
#include <list>
#include <string>
#include <algorithm>
namespace AST{
    class Node;
}

using node_l = std::vector<AST::Node*>;
using string_t = std::string;
using idList = std::list<std::string>;
using varList = std::vector<std::pair<std::string,std::string>>;

%}


%{
#include "ast.h"
int labels = 0;
int strings = 0;
int temps = 0;

idList ids;
varList vars;

//-----------------------------------------------/
//                  CLASSES
//-----------------------------------------------/

class ByteCounter{
        public: 
            std::vector<std::string> refs;
            std::vector<std::pair<std::string, std::string>> params;
            ByteCounter(std::string id1){
                id = id1;
            }

            std::string getPlace(std::string id){
                for(auto &a : params){
                    if(a.first == id) return a.second;
                }
                for(auto &b : refs){
                    if(id == b){
                        return "dword["+id+"]";
                    }
                }
                return "dword["+id+"]";
            }
        private:
            std::string id;
};

ByteCounter* currentFunction = nullptr;
std::vector<ByteCounter*> count_b;
std::unordered_map<std::string, std::string> idTypes;

//-----------------------------------------------/
//               FUNCTIONS
//-----------------------------------------------/
std::string newTemp(){
    return "dword[tmp" + std::to_string(temps++) + "]";
}

std::string newLabel(){
    return "label" + std::to_string(labels++);
}

std::string newStr(){
    return "str" + std::to_string(strings++);
}

std::string getBoolPrint(string_t place){
    std::ostringstream out;
    string_t contLabel = newLabel();
    string_t isTrue = newLabel();

    out << "cmp " << place << ", 1\n"
        << "je " << isTrue << "\n\n"
        << "push Falsep\n"
        << "jmp " << contLabel << "\n\n"
        << isTrue <<  ":\n"
        << "push Truep\n"
        <<  contLabel << ":\n"
        << "call printf\n"
        << "add esp, 4\n";

    return out.str();
}


%}


%node Node %abstract %typedef = {
    %nocreate string_t asm_code = {""};
    %nocreate string_t place = {""};
}


%node Expression Node %abstract = {
    
}

//-----------------------------------------------/
//              BINARY  EXPRESSIONS
//-----------------------------------------------/
%node LessEqThanExpr BinaryExpression
%node GreaterEqThanExpr BinaryExpression
%node LessThanExpr BinaryExpression
%node GreaterThanExpr BinaryExpression
%node EqualExpr BinaryExpression
%node NotEqualExpr BinaryExpression
%node AndExpr BinaryExpression
%node OrExpr BinaryExpression
%node AssignStmt BinaryExpression
%node SubExpr BinaryExpression
%node AddExpr BinaryExpression
%node DivExpr BinaryExpression
%node ModExpr BinaryExpression
%node MultExpr BinaryExpression


%node BinaryExpression Expression %abstract = {
    Node* Expr1;
    Node* Expr2;
}

%node NumExpr Expression= {
    int val;
}

%node BoolExpr Expression = {
    string_t val;
}

%node CharExpr Expression = {
    int val;
}

%node IdExpr Expression={
    string_t val;
}

%node ArrayExpr Expression={
    string_t id;
    Node* pos;
}

//-----------------------------------------------/
//              NODE  PROGRAMS
//-----------------------------------------------/
%node NodeStmts Node %abstract

%node IfStmt NodeStmts = {
    Node* cond;
    Node* trueBlock;
    Node* elseBlock;
    string_t elseLabel;
    string_t endLabel;
}

%node Stmt_List NodeStmts = {
    node_l statements;
}

%node WhileStmt NodeStmts = {
    Node* condition;
    Node* block;
    string_t label_end;
    string_t label_start;
}

%node ForStmt NodeStmts = {
    Node* assign;
    Node* cond;
    Node* block;
    string_t label_start;
    string_t label_end;
}

%node RptStmt NodeStmts = {
    Node* condition;
    Node* statements;
    
}

%node S_Constant Expression = {
    string_t val;
}

%node Proc_Decl Node = {
    string_t procedureID;
    node_l args;
    node_l varSection;
    Node* statements;
}

%node Func_Decl Node = {
    string_t functionID;
    node_l args;
    Node* type;
    node_l varSection;
    Node* statements;
}

%node RetrnStmt NodeStmts = {
    Node* expr;
}

%node Program_Call Node = {
    string_t id;
    node_l args;
}

%node Program_C Node = {
    Node* varSection;
    Node* subprogramSection;
    Node* statements;
}
%node Var_Decl Node = {
    Node* type;
    idList identifierList;
}

%node Type_N Node = {
    string_t type;
    int arraySize;
    Node* arrayType;
}

%node Argument_N Node = {
    Node* type;
    string_t identifier;
    int isRef; //1 significa que es parametro por referencia, 0 que no
    int pos;
}

%node PrintStmt NodeStmts = {
    node_l args;
}


%operation void gen_code(Node *e);

gen_code(LessThanExpr){
    gen_code(e-> Expr1);
    gen_code(e-> Expr2);

    e -> place = e->Expr2->place;

    std::ostringstream out;
    out <<  e->Expr1 -> asm_code << '\n'
        << e->Expr2 -> asm_code << '\n'
        << "mov eax," << e->Expr1->place << '\n'
        << "cmp eax," << e->place << '\n'
        << "mov eax,0\n"
        << "setl al \n"
        << "mov " << e -> place << ",eax\n";

    //std::cout << "LessThanExpr: \n" << out.str();
    e -> asm_code = out.str();
}

gen_code(GreaterThanExpr){
    gen_code(e-> Expr1);
    gen_code(e-> Expr2);

    e -> place = e->Expr2->place;

    std::ostringstream out;
    out <<  e->Expr1 -> asm_code << '\n'
        << e->Expr2 -> asm_code << '\n'
        << "mov eax," << e->Expr1->place << '\n'
        << "cmp eax," << e->place << '\n'
        << "mov eax,0\n"
        << "setg al \n"
        << "mov " << e -> place << ",eax\n";

    //std::cout << "LessThanExpr: \n" << out.str();
    e -> asm_code = out.str();
}

gen_code(LessEqThanExpr){
    gen_code(e-> Expr1);
    gen_code(e-> Expr2);

    e -> place = e->Expr2->place;

    std::ostringstream out;
    out <<  e->Expr1 -> asm_code << '\n'
        << e->Expr2 -> asm_code << '\n'
        << "mov eax," << e->Expr1->place << '\n'
        << "cmp eax," << e->place << '\n'
        << "mov eax,0\n"
        << "setle al \n"
        << "mov " << e -> place << ",eax\n";

    //std::cout << "LessThanExpr: \n" << out.str();
    e -> asm_code = out.str();
}

gen_code(GreaterEqThanExpr){            //AST::paramNode* stuff = new AST::paramNode($2, "string", pos);
    gen_code(e-> Expr2);

    e -> place = e->Expr2->place;

    std::ostringstream out;
    out <<  e->Expr1 -> asm_code << '\n'
        << e->Expr2 -> asm_code << '\n'
        << "mov eax," << e->Expr1->place << '\n'
        << "cmp eax," << e->place << '\n'
        << "mov eax,0\n"
        << "setge al\n"
        << "mov " << e -> place << ",eax\n";

    e -> asm_code = out.str();
}


gen_code(EqualExpr){
    gen_code(e->Expr1);
    gen_code(e->Expr2);

    e->place = e->Expr2->place;

    std::ostringstream out;

    out << e->Expr1->asm_code << '\n'
        << e->Expr2->asm_code << '\n'
        << "mov eax," << e->Expr1->place << '\n'
        << "cmp eax," << e->place << '\n'
        << "mov eax,0\n"
        << "sete al\n"
        << "mov " << e->place << ",eax\n";
    
    e-> asm_code = out.str();
}


gen_code(NotEqualExpr){
    gen_code(e->Expr1);
    gen_code(e->Expr2);

    e->place = e->Expr2->place;

    std::ostringstream out;

    out << e->Expr1->asm_code << '\n'
        << e->Expr2->asm_code << '\n'
        << "mov eax," << e->Expr1->place << '\n'
        << "cmp eax," << e->place << '\n'
        << "mov eax,0\n"
        << "setne al\n"
        << "mov " << e->place << ",eax\n";
    
    e-> asm_code = out.str();
}

gen_code(AndExpr){
    gen_code(e-> Expr1);
    gen_code(e-> Expr2);

    e -> place = e->Expr2->place;
    string_t label_false = newLabel();
    string_t label_end = newLabel();

    std::ostringstream out;

    out 
        << e->Expr1 -> asm_code << '\n'
        << e->Expr2 -> asm_code << '\n'
        << "cmp " << e->Expr1 -> place << ",0\n"
        << "je " << label_false << '\n'
        << "cmp " << e->Expr2->place << ",0\n"
        << "je " << label_false << '\n'
        << "mov " << e->place << ",1 " << '\n'
        << "jmp " << label_end << '\n'
        << label_false << ":\n"
        << "mov " << e->place << ",0\n"
        << label_end << ":\n";

    e -> asm_code = out.str();


}

gen_code(OrExpr){
    gen_code(e->Expr1);
    gen_code(e->Expr2);

    e->place = newTemp();
    string_t label_true = newLabel();
    string_t label_end = newLabel();

    std::ostringstream out;

    out
        << e->Expr1->asm_code << '\n'
        << e->Expr2->asm_code  << '\n'
        << "cmp " << e->Expr1 -> place << ",1\n"
        << "je " << label_true << '\n'
        << "cmp " << e->Expr2->place << ",1\n"
        << "je " << label_true << '\n'
        << "mov " << e->place << ",0\n"
        << "jmp " << label_end << '\n'
        << label_true << ":\n"
        << "mov " << e->place << ",1\n"
        << label_end << ":\n";

        e->asm_code = out.str();
}

gen_code(ArrayExpr){
    gen_code(e->pos);
    std::ostringstream out;
    e-> place = newTemp();

    NumExpr* arrPos = static_cast<NumExpr*> (e->pos);

    out << e->pos->asm_code << '\n'
        << "mov ebx," << e->pos->place << '\n'
        << "mov ecx," << "dword[" << e->id << "+ebx*4-4]\n"
        << "mov " << e->place << ",ecx\n";
    
    e->asm_code = out.str();
}


gen_code(NumExpr){
    e -> place = newTemp();
    e -> asm_code = "mov " + e -> place + "," + std::to_string(e -> val);
}

gen_code(IdExpr){
    if(currentFunction != nullptr){
        e->place = currentFunction->getPlace(e->val);
    }else{
        e->place = "dword["+e->val+"]";
        e-> asm_code = "";
        ids.push_back(e->val);
    }
    
}

gen_code(Stmt_List){
    for(auto &stmt : e->statements){
        gen_code(stmt);
        e->place = stmt->place;
        e->asm_code += stmt->asm_code;
    }
}



gen_code(AddExpr){
    gen_code(e-> Expr1);
    gen_code(e-> Expr2);

    //e -> place = e->Expr1->place;
    e->place = newTemp();
    std::ostringstream out;

    out << e->Expr1 ->asm_code << '\n'
        << e->Expr2 ->asm_code << '\n'
        << "mov eax," << e->Expr1->place << '\n'
        << "add eax," << e->Expr2->place << '\n'
        << "mov " << e->place << ",eax\n";
        
    e -> asm_code = out.str();
}

gen_code(SubExpr){
    gen_code(e-> Expr1);
    gen_code(e-> Expr2);
    //e->place = e->Expr1->place;
    e -> place = newTemp();
    std::ostringstream out;

    out << e->Expr1 ->asm_code << '\n'
        << e->Expr2 ->asm_code << '\n'
        << "mov eax," << e->Expr1->place << '\n'
        << "sub eax," << e->Expr2->place << '\n'
        << "mov " << e->place << ",eax\n";


    e -> asm_code = out.str();

}


gen_code(DivExpr){
    gen_code(e-> Expr1);
    gen_code(e-> Expr2);

    e -> place = newTemp();
    //std::cout << "EPLACE " << e->Expr1->place << std::endl;
    std::ostringstream out;

    out << e->Expr1 ->asm_code << '\n'
        << e->Expr2 ->asm_code << '\n'
        << "mov eax," << e->Expr1 -> place << '\n'
        << "mov edx,0" << '\n' 
        << "div " << e->Expr2->place << '\n'
        << "mov " << e->place << ",eax" << '\n';

    e -> asm_code = out.str();

}

gen_code(ModExpr){
    gen_code(e-> Expr1);
    gen_code(e-> Expr2);

    e -> place = newTemp();

    std::ostringstream out;

    out << e->Expr1 ->asm_code << '\n'
        << e->Expr2 ->asm_code << '\n'
        << "mov eax," << e->Expr1 -> place << '\n'
        << "mov edx,0" << '\n' 
        << "div " << e->Expr2->place << '\n'
        << "mov " << e->place << ",edx" << '\n';

    e -> asm_code = out.str();
}

gen_code(MultExpr){

    gen_code(e-> Expr1);
    gen_code(e-> Expr2);

    e -> place = newTemp();
    std::ostringstream out;

    out << e->Expr1 ->asm_code << '\n'
        << e->Expr2 ->asm_code << '\n'
        << "mov edx,0" << '\n' 
        << "mov eax," << e->Expr1 -> place << '\n'
        << "mul " << e->Expr2 ->place << '\n'
        << "mov " << e->place << ",eax" << '\n';

    e -> asm_code = out.str();

}

gen_code(IfStmt){
    gen_code(e->cond);
    gen_code(e->trueBlock);


    std::ostringstream out;
    if(e->elseBlock != nullptr){
        gen_code(e->elseBlock);
        e-> elseLabel = newLabel();
        e-> endLabel = newLabel();

        out << e->cond->asm_code << '\n'
            << "cmp " << e-> cond->place << ",0\n"
            << "je " << e->elseLabel << '\n'
            << e-> trueBlock->asm_code << '\n'
            << "jmp " << e->endLabel << '\n'
            << e->elseLabel << ":\n"
            << e->elseBlock->asm_code << '\n'
            << e->endLabel << ":\n";
    }else{
        e->endLabel = newLabel();
        out << e->cond->asm_code << '\n'
            << "cmp " << e->cond->place << ",0\n"
            << "je " << e->endLabel << '\n'
            << e->trueBlock->asm_code << '\n'
            << e->endLabel<< ":\n";
    }

    e->asm_code = out.str();
    
}

gen_code(WhileStmt){
    gen_code(e->condition);
    gen_code(e->block);
    e-> label_start = newLabel();
    e-> label_end = newLabel();

    std::ostringstream out;

    out << e->label_start << ":\n"
        << e->condition->asm_code << '\n'
        << "cmp " << e->condition->place << ", 0\n"
        << "je " << e->label_end << '\n'
        << e->block->asm_code << '\n'
        << "jmp " << e->label_start << '\n'
        << e->label_end << ":\n";

    e->asm_code = out.str();
}


gen_code(ForStmt){
    gen_code(e->assign);
    gen_code(e->cond);
    gen_code(e->block);

    e-> label_start = newLabel();
    e-> label_end = newLabel();

    std::ostringstream out;

    out << e->assign->asm_code << '\n'
        << e->cond->asm_code << '\n'
        << e-> label_start << ":\n"
        << "mov eax, " <<  e->cond->place << '\n'
        << "cmp " << e->assign ->place << ",eax\n"
        << "jg " << e->label_end
        << e->block->asm_code << '\n'
        << "inc " << e->assign ->place << '\n'
        << "jmp " << e->label_start << '\n'
        << e->label_end << ":\n";

    e-> asm_code = out.str();


}

gen_code(RptStmt){
    gen_code(e->condition);
    gen_code(e->statements);

    std::ostringstream out;

    string_t repeatL = newLabel(); 
    std::string exitL = newLabel();

    out << repeatL << ":\n"
        << e-> statements ->asm_code << '\n'
        << e-> condition->asm_code << '\n'
        << "cmp " << e->condition->place << ", 1\n"
        << "je " << exitL << "\n"
        << "jmp " << repeatL << "\n"
        << exitL << ":\n";

    e->asm_code = out.str();
}


gen_code(Func_Decl){
    std::ostringstream out;

    ByteCounter* funcion = new ByteCounter(e->functionID);
    std::vector<std::pair<std::string, std::string>> vectorTemp;
    std::vector<std::string> refsTemp;

    for(auto &a : e->args){
        AST::Argument_N* arg = static_cast<AST::Argument_N*>(a);
        if(arg->isRef){
            refsTemp.push_back(arg->identifier);
        }else{
            vectorTemp.push_back(make_pair(arg->identifier,"dword[ebp+"+std::to_string(arg->pos)+"]"));
        }
    }
    count_b.push_back(funcion);
    funcion->params = vectorTemp;
    
    currentFunction = funcion;
    gen_code(e->statements);
    out << e-> functionID << ":\n"
        << "push ebp\n"
        << "mov ebp,esp\n"
        << e->statements->asm_code << '\n'
        << "mov esp,ebp\n"
        << "pop ebp\n"
        << "ret\n";

    e->asm_code = out.str();
    currentFunction = nullptr;
}


gen_code(Proc_Decl){
    
    std::ostringstream out;
    ByteCounter* funcion = new ByteCounter(e->procedureID);
    std::vector<std::pair<std::string, std::string>> vectorTemp;
    std::vector<std::string> refsTemp;

    for(auto &a : e->args){
        AST::Argument_N* arg = static_cast<AST::Argument_N*>(a);
        if(arg->isRef){
            refsTemp.push_back(arg->identifier);
        }else{
            vectorTemp.push_back(make_pair(arg->identifier,"dword[ebp+"+std::to_string(arg->pos)+"]"));
        }
    }
    count_b.push_back(funcion);
    funcion->params = vectorTemp;
    
    currentFunction = funcion;
    gen_code(e->statements);
    out << e-> procedureID << ":\n"
        << "push ebp\n"
        << "mov ebp,esp\n"
        << "sub esp," << e->varSection.size()*4 << '\n'
        << e->statements->asm_code << '\n'
        << "mov esp,ebp\n"
        << "pop ebp\n"
        << "ret\n";

    e->asm_code = out.str();
    currentFunction = nullptr;
}

gen_code(Program_Call){
    e->place = newTemp();
    std::ostringstream out;

    std::vector<AST::Node*> params = e->args;
    //pushing de derecha a izq
    std::reverse(params.begin(), params.end());

    for(auto &param: params){
        gen_code(param);

        if(param -> isA(IdExpr_kind)){
            IdExpr* ID = static_cast<IdExpr*> (param);
            string_t varName = ID->val;
            
            out << param ->asm_code << '\n'
                << "push " << param->place << '\n';
        }else{
            out << param ->asm_code << '\n'
                << "push " << param->place << '\n';
        }

    }
        
    out << "call " << e->id << '\n'
        << "add esp," <<  (e->args.size())*4 << '\n'
        << "mov " <<  e->place << ",eax\n";


    e->asm_code = out.str();

}


gen_code(RetrnStmt){
    gen_code(e->expr);
    e->place = e->expr->place;

    std::ostringstream out;
    out << e->expr->asm_code << '\n'
    << "mov eax," << e->expr->place << '\n'
    << "mov esp,ebp\n"
    << "pop ebp\n"
    << "ret\n";

    e->asm_code = out.str();
}






gen_code(Program_C){
    gen_code(e->varSection);
    gen_code(e->subprogramSection);
    gen_code(e->statements);
    std::ostringstream stringIDs;
    std::ostringstream tempData;

    for(int i = 0; i< temps; i++){
        tempData << "tmp" << i << " dd 0\n";
    }
    //agregando los S_Constanttants en la seccion de data
    for (auto a: vars){
        stringIDs << a.first << " db \'" << a.second << "\',0 ,10\n";
        //first es el nombre de la variable,second es la string
    }
    std::ostringstream out;
    out << "extern printf\n"
        << "global main\n"
        << "section .data\n"
        << "format db '%d',0\n"
        << "charFormat db '%c',0\n"
        //aqui revisar si hay bools definidos para no tener que hacer pushes innecesarios
        << "true dd 1\n"
        << "false dd 0\n"
        << "Truep db 'Verdadero',0\n"
        << "Falsep db 'Falso',0\n"
        << e->varSection->asm_code << '\n'
        << tempData.str()
        << stringIDs.str() << '\n'
        << "section .text\n"
        << e->subprogramSection->asm_code << '\n'
        << "main: \n"
        << e->statements->asm_code << '\n'
        << "ret\n";

    e->asm_code = out.str();
}



gen_code(Var_Decl){
    //iniciar las variables en 0
    std::ostringstream out;

    //std::cout << "entered\n";
    //std::cout << "size: " << e->identifierList.size() << '\n';
    for(auto var : e->identifierList){
        Type_N * typeN = static_cast<Type_N*>(e->type);

        if(typeN-> type == "int"){
            idTypes[var] = "int";
        }else if (typeN-> type == "bool"){
            idTypes[var] = "bool";
        }else if (typeN-> type == "char"){
            idTypes[var] = "char";
        }else{
            idTypes[var] = "arr";
        }

        if(typeN-> type != "arr"){
            out << var << " dd 0\n";
        }else{
            //si es arreglo
            out << var << " times " << typeN -> arraySize << " dd 0\n";
        }
        
    }

    e->asm_code = out.str();
}


gen_code(Argument_N){

}


gen_code(PrintStmt){
    std::ostringstream out;

    for (auto &a: e-> args){
        gen_code(a);
        if(a->isA(IdExpr_kind)){
            IdExpr* ID = static_cast<IdExpr*>(a);

            out << a->asm_code << std::endl;
            if(idTypes[ID->val] == "int" || idTypes[ID->val] == "char"){
                out << "push " << a->place << "\n";
            }else if(idTypes[ID->val] == "bool"){
                out << getBoolPrint(a->place);
            }else if(idTypes[ID->val] == "char"){
                out << "push charFormat\n"
                << "call printf\n";
            }


            if(idTypes[ID->val] == "int"){
                out << "push format\n"
                    << "call printf\n";
            }else if(idTypes[ID->val] == "char"){
                    out << "push charFormat\n"
                        << "call printf\n";
            }

            if(idTypes[ID->val] == "int" || idTypes[ID->val] == "char" ){
                out << "add esp,8\n";
            }else if(idTypes[ID->val] == "bool"){
                //out << "add esp, 4\n";
            }
            
        }else if(a->isA(NumExpr_kind)){
            //std::cout << "is num\n";
            out << a->asm_code << '\n'
                << "push " << a->place << '\n'
                << "push format\n"
                << "call printf\n"
                << "add esp,8\n"; 
        }
        else if(a->isA(S_Constant_kind)){
            
            out << a->asm_code << '\n'
                << "push " << a -> place << '\n'
                << "call printf\n"
                << "add esp,4\n"; 


        }else if(a->isA(BinaryExpression_kind)){
            BinaryExpression* bin = static_cast<BinaryExpression*>(a);

            gen_code(a);
        
            out << a->asm_code << '\n'
                << "push " << a->place << "\n"
                << "push format\n"
                << "call printf\n"
                << "add esp,8\n";

        }else if(a->isA(Program_Call_kind)){
            gen_code(a);
            out << a-> asm_code << '\n'
                << "push eax\n"
                << "push format\n"
                << "call printf\n"
                << "add esp,8\n";
        }else if(a->isA(ArrayExpr_kind)){
            gen_code(a);
            out << a->asm_code << '\n'
                << "push " << a->place << '\n'
                << "push format\n"
                << "call printf\n"
                << "add esp, 8\n";
        }else if(a->isA(CharExpr_kind)){
            //std::cout << "is char\n";
            CharExpr* charE = static_cast<CharExpr*>(a);
            out << a->asm_code << '\n'
                << "push " << charE->val << "\n"
                << "push charFormat\n"
                << "call printf\n"
                << "add esp,8\n";
        }
        
    }

    e->asm_code = out.str();

}


gen_code(Type_N){

}


gen_code(AssignStmt){
    gen_code(e-> Expr1);
    gen_code(e-> Expr2);
    std::ostringstream out;

    if(e->Expr1->isA(IdExpr_kind)){
        //casteando el exp1 a un id para agregar a la lista de ids
        IdExpr* exp1 = static_cast<IdExpr*>(e->Expr1);
        ids.push_back(exp1->val);

        e->place = e->Expr1 -> place;

        out << e->Expr2->asm_code << '\n'
            << e->Expr1-> asm_code << '\n'
            << "mov eax, " << e->Expr2->place << '\n'
            << "mov " << e->Expr1 -> place << ",eax\n";

    }else{
        ArrayExpr* exp1 = static_cast<ArrayExpr*>(e->Expr1);
        NumExpr* index = static_cast<NumExpr*> (exp1->pos);
        //si se esta asignando a un arreglo

        out << e->Expr2->asm_code << '\n'
            //<< e->Expr1->asm_code << '\n'
            << "mov ecx, " << e->Expr2->place << '\n'
            << "mov dword[" << exp1-> id << "+" << index -> val << " *4-4],ecx\n"
            << "mov ecx, dword[" << exp1-> id << "+" << index -> val << "*4-4]\n"
            << "mov " << e->Expr2 ->place << ",ecx\n\n";
            e->place = e->Expr2->place;
        
    }
    
    e->asm_code = out.str();
}


gen_code(S_Constant){
    string_t strName = newStr();
    vars.push_back(std::make_pair(strName, e->val));

    e->place = strName;
}

gen_code(BoolExpr){
    if(e->val == "t")
        e->place = "dword[true]";
    else
        e->place = "dword[false]";
}

gen_code(CharExpr){
    e -> place = newTemp();
    e -> asm_code = "mov " + e -> place + "," + std::to_string(e -> val);
}